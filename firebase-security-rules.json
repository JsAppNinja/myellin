{
  "rules": {
    "outcomes": {
      ".indexOn": ["slug"],
      ".read": true,
      "$outcome": {
        ".write": "auth != null &&
                  (
                    // Admins can write
                    root.child('users/' + auth.uid + '/admin').val() === true ||
                    (
                      // If not admin, they can only write to playlist_count for existing data
                      // Our validate rule for playlist_count ensures it can only be incremented and de-incremented
                      data.exists() &&
                      newData.hasChild('playlist_count') &&
                      // Make sure they aren't changing any other fields
                      data.child('slug').val() === newData.child('slug').val() && 
                      data.child('title').val() === newData.child('title').val()
                    )
                  )",
        // Required fields
        ".validate": "newData.hasChildren(['title', 'slug', 'playlist_count'])",
        "slug": {
          ".validate": "newData.isString()"
        },
        "title": {
          ".validate": "newData.isString()"
        },
        "playlist_count": {
          ".validate": "newData.isNumber() &&
                        // It's being initialized at 0
                        (
                          !data.exists() &&
                          newData.val() === 0
                        ) ||
                        // Or it's being incremented / de-incremented
                        (
                          data.isNumber() && 
                          (
                              newData.val() === data.val() + 1 ||
                              newData.val() === data.val() - 1
                          )
                        )"
        },
        // No other fields are allowed
        "$other": {
          ".validate": false
        }              
      }  
    },
    "playlists": {
      ".read": true,
      "$playlist": {
        ".write": "auth != null &&
                  (
                    // Can write if creating a new Playlist
                    !data.exists() ||
                    // Or if user is the author
                    data.child('author_id').val() === auth.uid || 
                    // Or if user is admin
                    root.child('users/' + auth.uid + '/admin').val() === true
                  )",
        ".validate": "newData.hasChildren(['author_id', 'description'])",
        "author_id": {
          ".validate": "newData.val() === auth.uid"
        },
        "description": {
          ".validate": "newData.isString()"
          //".validate": "newData.isString() && newData.val().matches(/<(?>\/?)(?:[^p|body|b|u|em|strong|ul|ol|li|h1|h2|h3|h4|h5|h6|hr|a|br|img|tr|td|table|tbody|label|div|sup|sub|caption|P]|[p|cufontext|cufoncanvas|P][^\s>\/])[^>]*>/)"
          //".validate": "newData.isString() && newData.val().matches(/^([^<>]*(<(i|p|b|br|strong|em|blockquote|pre|code|a href=\"http[^\"]+\")>[^<>]+<\/(i|p|b|br|strong|em|blockquote|pre|code|a)>)?[^<>]*)+$/)"
        }
      }
    },
    "suboutcomes": {
      ".read": true,
      "$suboutcome": {
        ".write": "auth != null &&
                  (
                    // Can write if creating a new Suboutcome
                    !data.exists() ||
                    // Or if user is the author
                    data.child('author_id').val() === auth.uid ||
                    // Or if user is admin
                    root.child('users/' + auth.uid + '/admin').val() === true ||
                    (
                      // If not author, they can only write to option_count for existing data
                      // Our validate rule for option_count ensures ensures it can only be incremented and de-incremented
                      data.exists() &&
                      newData.hasChild('option_count') &&
                      // Make sure they aren't changing any other fields
                      data.child('title').val() === newData.child('title').val() &&
                      data.child('author_id').val() === newData.child('author_id').val()
                    )
                  )",
        // Required fields
        ".validate": "newData.hasChildren(['title', 'author_id', 'option_count'])", 
        "title": {
          ".validate": "newData.isString()"
        },
        "option_count": {
          ".validate": "newData.isNumber() &&
                        // It's being initialized at 0
                        (
                          !data.exists() &&
                          newData.val() === 0
                        ) ||
                        // Or it's being incremented / de-incremented
                        (
                          data.isNumber() && 
                          (
                            newData.val() === data.val() + 1 ||
                            newData.val() === data.val() - 1
                          )
                        )"
        },
        "author_id": {
          ".validate": "newData.val() === auth.uid"
        },
        // No other fields are allowed
        "$other": {
          ".validate": false
        }
      }
    },
    "options": {
      ".read": true,
      "$option": {
        // Must be logged in
        // Must be creating a new option OR be the author
        ".write": "auth != null && 
                  (
                    // Can write if creating a new Option
                    !data.exists() || 
                    // Or if user is the author
                    data.child('author_id').val() === auth.uid || 
                    // Or if user is admin
                    root.child('users/' + auth.uid + '/admin').val() === true
                  )",      
        // Required fields
        ".validate": "newData.hasChildren(['author_id', 'description'])", 
        "author_id": {
          ".validate": "newData.val() === auth.uid"
        },  
        "description": {
          ".validate": "newData.isString()"
        }
      }
    },

    "relations": {
      "section_to_outcome": {
        "home": {
          ".read": true,
          "$outcome": {
            // Must be an admin to add an outcome to the homepage
            ".write": "auth != null && 
                      root.child('users/' + auth.uid + '/admin').val() === true"
          }
        }
      },
      "outcome_to_playlist": {
        "$outcome": {
          ".read": true,
          "$playlist": {
            ".write": "auth != null &&
                      (
                        ( 
                          // If deleting (newData will be empty)
                          !newData.exists() &&
                            (
                              // And user is the author
                              root.child('playlists/' + data.child('playlist_id').val() + '/author_id').val() === auth.uid ||
                              // Or if user is admin
                              root.child('users/' + auth.uid + '/admin').val() === true
                            )
                        ) || 
                        // If writing and are owner of the playlist
                        root.child('playlists/' + newData.child('playlist_id').val() + '/author_id').val() === auth.uid ||
                        (
                          // If not author, they can only write to upvote_count for existing data
                          // Our validate rule for upvote_count ensures ensures it can only be incremented and de-incremented
                          data.exists() &&
                          newData.hasChild('upvote_count') &&
                          // Make sure they aren't changing any other fields
                          data.child('parent_outcome_id').val() === newData.child('parent_outcome_id').val() &&
                          data.child('playlist_id').val() === newData.child('playlist_id').val()
                        )
                      )",
            // Required fields
            // And make sure parent object keys ($outcome and $playlist) are formatted correctly
            ".validate": "newData.hasChildren(['parent_outcome_id', 'playlist_id', 'upvote_count']) &&
                          $outcome === 'outcome_' + newData.child('parent_outcome_id').val() &&
                          $playlist === 'playlist_' + newData.child('playlist_id').val() ",
            "parent_outcome_id": {
              ".validate": "newData.isString()"
            },
            "playlist_id": {
              ".validate": "newData.isString()"
            },
            "upvote_count" : {
              ".validate": "newData.isNumber() &&
                            // It's being initialized at 0
                            (
                              !data.exists() &&
                              newData.val() === 0
                            ) ||
                            // Or it's being incremented / de-incremented
                            (
                              data.isNumber() && 
                              (
                                newData.val() === data.val() + 1 ||
                                newData.val() === data.val() - 1
                              )
                            )"
            },
            // No other fields are allowed
            "$other": {
              ".validate": false
            }
          }
        }
      },
      "playlist_to_suboutcome": {
        "$playlist": {
          ".read": true,
          "$suboutcome": {
            ".write": "auth != null &&
                      (
                        ( 
                          // If deleting and are the owner of the playlist
                          !newData.exists() &&
                           root.child('playlists/' + data.child('parent_playlist_id').val() + '/author_id').val() === auth.uid
                        ) || 
                        // If writing and are owner of the playlist
                        root.child('playlists/' + newData.child('parent_playlist_id').val() + '/author_id').val() === auth.uid
                      )",
            // Required fields
            // And make sure parent object keys ($playlist and $suboutcome) are formatted correctly
            ".validate": "newData.hasChildren(['parent_playlist_id', 'suboutcome_id', 'order']) &&
                          $playlist === 'playlist_' + newData.child('parent_playlist_id').val() &&
                          $suboutcome === 'suboutcome_' + newData.child('suboutcome_id').val()",
            "parent_playlist_id": {
              ".validate": "newData.isString()"
            },
            "suboutcome_id": {
              ".validate": "newData.isString()"
            },
            "order": {
              ".validate": "newData.isNumber()"
            },
            "chosen_option": {
              ".validate": "newData.isString()"
            },
            // No other fields are allowed
            "$other": {
              ".validate": false
            }
          }
        }
      },
      // TODO: double-check this is right (any other owner privs we should be checking?)
      "suboutcome_to_option": {
        "$suboutcome": {
          ".read": true,
          "$option": {
            ".write": "auth != null &&
                      (
                        ( 
                          // If deleting (newData will be empty)
                          !newData.exists() &&
                          (
                            // And user is the author
                            root.child('options/' + data.child('option_id').val() + '/author_id').val() === auth.uid ||
                            // Or if user is admin
                            root.child('users/' + auth.uid + '/admin').val() === true
                          ) 
                        ) || 
                        // If writing and are owner of the option
                        root.child('options/' + newData.child('option_id').val() + '/author_id').val() === auth.uid ||
                        (
                          // If not author, they can only write to upvote_count for existing data
                          // Our validate rule for upvote_count ensures ensures it can only be incremented and de-incremented
                          data.exists() &&
                          newData.hasChild('upvote_count') &&
                          // Make sure they aren't changing any other fields
                          data.child('parent_suboutcome_id').val() === newData.child('parent_suboutcome_id').val() &&
                          data.child('option_id').val() === newData.child('option_id').val()
                        )
                      )",
            // Required fields
            // And make sure parent object keys ($suboutcome and $option) are formatted correctly
            ".validate": "newData.hasChildren(['parent_suboutcome_id', 'option_id', 'upvote_count']) &&
                          $suboutcome === 'suboutcome_' + newData.child('parent_suboutcome_id').val() &&
                          $option === 'option_' + newData.child('option_id').val()",
            "parent_suboutcome_id": {
              ".validate": "newData.isString()"
            },
            "option_id": {
              ".validate": "newData.isString()"
            },
            "upvote_count" : {
              ".validate": "newData.isNumber() &&
                            // It's being initialized at 0
                            (
                              !data.exists() &&
                              newData.val() === 0
                            ) ||
                            // Or it's being incremented / de-incremented
                            (
                              data.isNumber() && 
                              (
                                newData.val() === data.val() + 1 ||
                                newData.val() === data.val() - 1
                              )
                            )"
            },
            // No other fields are allowed
            "$other": {
              ".validate": false
            }
          }
        }
      },
      // TODO (future): Before letting people create a new playlist we may want to check that they have no value here (or they could create multiple playlists for an outcome)
      "user_to_outcome_to_playlist": {
        "$user": {
          "$outcome": {
            ".read": true,
            ".write": "$user === 'user_' + auth.uid",
            ".validate": "newData.isString()"
          }
        }
      },
      // No other fields are allowed
      "$other": {
        ".validate": false
      }
    },
    "users": {
      "$user_id": {
        ".read": true,
        ".write": "$user_id === auth.uid",
        ".validate": "newData.hasChildren(['id', 'username', 'full_name'])",
        "id": {
          ".validate": "newData.isString()"
        },
        "username": {
          ".validate": "newData.isString()"
        },
        "full_name": {
          ".validate": "newData.isString()"
        },
        "title": {
          ".validate": "newData.isString()"
        },
        "provider": {
          ".validate": "newData.isString()"
        },
        "editing_playlist": {
          ".validate": "newData.hasChildren(['parent_outcome_id', 'playlist_id', 'collapse'])",
          "parent_outcome_id": {
            ".validate": "newData.isString()"
          },
          "playlist_id": {
            ".validate": "newData.isString()"
          },
          "collapse": {
            ".validate": "newData.isBoolean()"
          }
        },
        "editing_option": {
          ".validate": "newData.hasChildren(['parent_suboutcome_id', 'option_id'])",
          "parent_suboutcome_id": {
            ".validate": "newData.isString()"
          },
          "option_id": {
            ".validate": "newData.isString()"
          }
        },
        "admin": {
          // Don't let people set self as admins (must be changed in Firebase forge)
          ".validate": false 
        },
        // No other fields are allowed
        "$other": {
          ".validate": false
        }
      }
    },
    "upvotes": {
      "option": {
        "$user_id": {
          "$suboutcome": {
            ".read": true,
            ".write": "$user_id === auth.uid",
            ".validate": "newData.hasChildren(['option_id', 'timestamp'])",
            "option_id": {
              ".validate": "newData.isString()"
            },
            "timestamp": {
              ".validate": "newData.isNumber()"
            },
            // No other fields are allowed
            "$other": {
              ".validate": false
            }
          }
        }
      },
      "playlist": {
        "$user_id": {
          "$outcome": {
            ".read": true,
            ".write": "$user_id === auth.uid",
            ".validate": "newData.hasChildren(['playlist_id', 'timestamp'])",
            "playlist_id": {
              ".validate": "newData.isString()"
            },
            "timestamp": {
              ".validate": "newData.isNumber()"
            },
            // No other fields are allowed
            "$other": {
              ".validate": false
            }
          }
        }
      }
    }
  }
}